// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: service/auth-api/auth.proto

package authapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticationServiceClient is the client API for AuthenticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationServiceClient interface {
	// Googlelogin is to authenticate with facebook OIDC provider
	GoogleLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// UserPasswordLogin is to authenticate without OIDC provider
	// But with user password login
	UserPasswordLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Logout is used to expire authorization token
	// this will be used for important operations where the account API will keep
	// track of the session in the back end
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	// GetSigningKey is used to the public key used to validate this service token
	GetSigningKey(ctx context.Context, in *SigningKeyRequest, opts ...grpc.CallOption) (*SigningKeyResponse, error)
	// CreateLogin is used to create account with account API authentication
	// mechanism Why it is different than using OIDC ? Because we need to verify
	// email / phone number before we register them as user! Whereas if you use
	// 3rd party, the verification process can be deffered to later time. We will
	// not expose this in the front end UI. Instead, this will be very useful when
	// we do integration / functionality testing.
	//
	// the account will have very minimal permission (only able to do
	// REGISTRATION)
	CreateLogin(ctx context.Context, in *CreateLoginRequest, opts ...grpc.CallOption) (*CreateLoginResponse, error)
	// GetAuthorizationToken is the general case of 'login'
	// It is used to get authorization for operations in our service
	GetAuthorizationToken(ctx context.Context, in *GetAuthorizationTokenRequest, opts ...grpc.CallOption) (*GetAuthorizationTokenResponse, error)
	// TrackLogin tracks user login activity
	TrackLogin(ctx context.Context, in *TrackLoginRequest, opts ...grpc.CallOption) (*TrackLoginResponse, error)
}

type authenticationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationServiceClient(cc grpc.ClientConnInterface) AuthenticationServiceClient {
	return &authenticationServiceClient{cc}
}

func (c *authenticationServiceClient) GoogleLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/authapi.AuthenticationService/GoogleLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) UserPasswordLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/authapi.AuthenticationService/UserPasswordLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/authapi.AuthenticationService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) GetSigningKey(ctx context.Context, in *SigningKeyRequest, opts ...grpc.CallOption) (*SigningKeyResponse, error) {
	out := new(SigningKeyResponse)
	err := c.cc.Invoke(ctx, "/authapi.AuthenticationService/GetSigningKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) CreateLogin(ctx context.Context, in *CreateLoginRequest, opts ...grpc.CallOption) (*CreateLoginResponse, error) {
	out := new(CreateLoginResponse)
	err := c.cc.Invoke(ctx, "/authapi.AuthenticationService/CreateLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) GetAuthorizationToken(ctx context.Context, in *GetAuthorizationTokenRequest, opts ...grpc.CallOption) (*GetAuthorizationTokenResponse, error) {
	out := new(GetAuthorizationTokenResponse)
	err := c.cc.Invoke(ctx, "/authapi.AuthenticationService/GetAuthorizationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) TrackLogin(ctx context.Context, in *TrackLoginRequest, opts ...grpc.CallOption) (*TrackLoginResponse, error) {
	out := new(TrackLoginResponse)
	err := c.cc.Invoke(ctx, "/authapi.AuthenticationService/TrackLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServiceServer is the server API for AuthenticationService service.
// All implementations must embed UnimplementedAuthenticationServiceServer
// for forward compatibility
type AuthenticationServiceServer interface {
	// Googlelogin is to authenticate with facebook OIDC provider
	GoogleLogin(context.Context, *LoginRequest) (*LoginResponse, error)
	// UserPasswordLogin is to authenticate without OIDC provider
	// But with user password login
	UserPasswordLogin(context.Context, *LoginRequest) (*LoginResponse, error)
	// Logout is used to expire authorization token
	// this will be used for important operations where the account API will keep
	// track of the session in the back end
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	// GetSigningKey is used to the public key used to validate this service token
	GetSigningKey(context.Context, *SigningKeyRequest) (*SigningKeyResponse, error)
	// CreateLogin is used to create account with account API authentication
	// mechanism Why it is different than using OIDC ? Because we need to verify
	// email / phone number before we register them as user! Whereas if you use
	// 3rd party, the verification process can be deffered to later time. We will
	// not expose this in the front end UI. Instead, this will be very useful when
	// we do integration / functionality testing.
	//
	// the account will have very minimal permission (only able to do
	// REGISTRATION)
	CreateLogin(context.Context, *CreateLoginRequest) (*CreateLoginResponse, error)
	// GetAuthorizationToken is the general case of 'login'
	// It is used to get authorization for operations in our service
	GetAuthorizationToken(context.Context, *GetAuthorizationTokenRequest) (*GetAuthorizationTokenResponse, error)
	// TrackLogin tracks user login activity
	TrackLogin(context.Context, *TrackLoginRequest) (*TrackLoginResponse, error)
	mustEmbedUnimplementedAuthenticationServiceServer()
}

// UnimplementedAuthenticationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServiceServer struct {
}

func (UnimplementedAuthenticationServiceServer) GoogleLogin(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleLogin not implemented")
}
func (UnimplementedAuthenticationServiceServer) UserPasswordLogin(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPasswordLogin not implemented")
}
func (UnimplementedAuthenticationServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthenticationServiceServer) GetSigningKey(context.Context, *SigningKeyRequest) (*SigningKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSigningKey not implemented")
}
func (UnimplementedAuthenticationServiceServer) CreateLogin(context.Context, *CreateLoginRequest) (*CreateLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLogin not implemented")
}
func (UnimplementedAuthenticationServiceServer) GetAuthorizationToken(context.Context, *GetAuthorizationTokenRequest) (*GetAuthorizationTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizationToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) TrackLogin(context.Context, *TrackLoginRequest) (*TrackLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackLogin not implemented")
}
func (UnimplementedAuthenticationServiceServer) mustEmbedUnimplementedAuthenticationServiceServer() {}

// UnsafeAuthenticationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServiceServer will
// result in compilation errors.
type UnsafeAuthenticationServiceServer interface {
	mustEmbedUnimplementedAuthenticationServiceServer()
}

func RegisterAuthenticationServiceServer(s grpc.ServiceRegistrar, srv AuthenticationServiceServer) {
	s.RegisterService(&AuthenticationService_ServiceDesc, srv)
}

func _AuthenticationService_GoogleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GoogleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authapi.AuthenticationService/GoogleLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GoogleLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_UserPasswordLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).UserPasswordLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authapi.AuthenticationService/UserPasswordLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).UserPasswordLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authapi.AuthenticationService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_GetSigningKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SigningKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GetSigningKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authapi.AuthenticationService/GetSigningKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GetSigningKey(ctx, req.(*SigningKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_CreateLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).CreateLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authapi.AuthenticationService/CreateLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).CreateLogin(ctx, req.(*CreateLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_GetAuthorizationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorizationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GetAuthorizationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authapi.AuthenticationService/GetAuthorizationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GetAuthorizationToken(ctx, req.(*GetAuthorizationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_TrackLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).TrackLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authapi.AuthenticationService/TrackLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).TrackLogin(ctx, req.(*TrackLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationService_ServiceDesc is the grpc.ServiceDesc for AuthenticationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authapi.AuthenticationService",
	HandlerType: (*AuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GoogleLogin",
			Handler:    _AuthenticationService_GoogleLogin_Handler,
		},
		{
			MethodName: "UserPasswordLogin",
			Handler:    _AuthenticationService_UserPasswordLogin_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthenticationService_Logout_Handler,
		},
		{
			MethodName: "GetSigningKey",
			Handler:    _AuthenticationService_GetSigningKey_Handler,
		},
		{
			MethodName: "CreateLogin",
			Handler:    _AuthenticationService_CreateLogin_Handler,
		},
		{
			MethodName: "GetAuthorizationToken",
			Handler:    _AuthenticationService_GetAuthorizationToken_Handler,
		},
		{
			MethodName: "TrackLogin",
			Handler:    _AuthenticationService_TrackLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/auth-api/auth.proto",
}
